[{"/home/DigPatho/Streamlit-Image-Annotation/streamlit_image_annotation/Point/frontend/src/index.tsx":"1","/home/DigPatho/Streamlit-Image-Annotation/streamlit_image_annotation/Point/frontend/src/PointDet.tsx":"2","/home/DigPatho/Streamlit-Image-Annotation/streamlit_image_annotation/Point/frontend/src/ThemeSwitcher.tsx":"3","/home/DigPatho/Streamlit-Image-Annotation/streamlit_image_annotation/Point/frontend/src/PointCanvas.tsx":"4","/home/DigPatho/Streamlit-Image-Annotation/streamlit_image_annotation/Point/frontend/src/Point.tsx":"5","/home/DigPatho/InteractiveAnnotatorStreamlitV3/streamlit_image_annotation/Point/frontend/src/index.tsx":"6","/home/DigPatho/InteractiveAnnotatorStreamlitV3/streamlit_image_annotation/Point/frontend/src/PointDet.tsx":"7","/home/DigPatho/InteractiveAnnotatorStreamlitV3/streamlit_image_annotation/Point/frontend/src/PointCanvas.tsx":"8","/home/DigPatho/InteractiveAnnotatorStreamlitV3/streamlit_image_annotation/Point/frontend/src/ThemeSwitcher.tsx":"9","/home/DigPatho/InteractiveAnnotatorStreamlitV3/streamlit_image_annotation/Point/frontend/src/Point.tsx":"10"},{"size":208,"mtime":1734437217788,"results":"11","hashOfConfig":"12"},{"size":3884,"mtime":1734441244177,"results":"13","hashOfConfig":"12"},{"size":817,"mtime":1734437217788,"results":"14","hashOfConfig":"12"},{"size":3394,"mtime":1734437217788,"results":"15","hashOfConfig":"12"},{"size":1087,"mtime":1734437217788,"results":"16","hashOfConfig":"12"},{"size":208,"mtime":1734437217788,"results":"17","hashOfConfig":"18"},{"size":3883,"mtime":1734462019232,"results":"19","hashOfConfig":"18"},{"size":3394,"mtime":1734437217788,"results":"20","hashOfConfig":"18"},{"size":817,"mtime":1734437217788,"results":"21","hashOfConfig":"18"},{"size":1087,"mtime":1734437217788,"results":"22","hashOfConfig":"18"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ajsg9w",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tuiw8e",{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},"/home/DigPatho/Streamlit-Image-Annotation/streamlit_image_annotation/Point/frontend/src/index.tsx",[],[],"/home/DigPatho/Streamlit-Image-Annotation/streamlit_image_annotation/Point/frontend/src/PointDet.tsx",["55","56"],[],"/home/DigPatho/Streamlit-Image-Annotation/streamlit_image_annotation/Point/frontend/src/ThemeSwitcher.tsx",[],[],"/home/DigPatho/Streamlit-Image-Annotation/streamlit_image_annotation/Point/frontend/src/PointCanvas.tsx",["57"],[],"import React, { useEffect } from \"react\"\nimport { Layer, Stage, Image } from 'react-konva';\nimport Point from './Point'\nimport Konva from 'konva';\n\nexport interface PointCanvasProps {\n  pointsInfo: any[],\n  mode: string,\n  selectedId: string | null,\n  setSelectedId: any,\n  setPointsInfo: any,\n  setLabel: any,\n  color_map: any,\n  scale: number,\n  label: string,\n  image_size: number[],\n  image: any,\n  strokeWidth: number\n}\nconst PointCanvas = (props: PointCanvasProps) => {\n  const {\n    pointsInfo,\n    mode,\n    selectedId,\n    setSelectedId,\n    setPointsInfo,\n    setLabel,\n    color_map,\n    scale,\n    label,\n    image_size,\n    image,\n    strokeWidth\n  }: PointCanvasProps = props\n  const checkDeselect = (e: any) => {\n    console.log('DOWN')\n    if (!(e.target instanceof Konva.Circle)) {\n      if (selectedId === null) {\n        if (mode === 'Transform') {\n          const pointer = e.target.getStage().getPointerPosition()\n          const points = pointsInfo.slice();\n          const new_id = Date.now().toString()\n          points.push({\n            x: pointer.x / scale,\n            y: pointer.y / scale,\n            label: label,\n            stroke: color_map[label],\n            id: new_id\n          })\n          setPointsInfo(points);\n          setSelectedId(new_id);\n        }\n      } else {\n        setSelectedId(null);\n      }\n    }\n  };\n\n  useEffect(() => {\n    const points = pointsInfo.slice();\n    for (let i = 0; i < points.length; i++) {\n      if (points[i].x < 0 || points[i].y < 0) {\n        points[i].x = Math.max(0, points[i].x)\n        points[i].y = Math.max(0, points[i].y)\n        setPointsInfo(points)\n      }\n      if (points[i].x > image_size[0] || points[i].y > image_size[1]) {\n        points[i].x = Math.min(points[i].x, image_size[0])\n        points[i].y = Math.min(points[i].y, image_size[1])\n        setPointsInfo(points)\n      }\n    }\n    console.log(pointsInfo)\n  }, [pointsInfo, image_size])\n  return (\n    <Stage width={image_size[0] * scale} height={image_size[1] * scale}\n      onMouseDown={checkDeselect}>\n      <Layer>\n        <Image image={image} scaleX={scale} scaleY={scale} />\n      </Layer>\n      <Layer>\n        {pointsInfo.map((point, i) => {\n          return (\n            <Point\n              key={i}\n              rectProps={point}\n              scale={scale}\n              strokeWidth={strokeWidth}\n              isSelected={mode === 'Transform' && point.id === selectedId}\n              onClick={() => {\n                if (mode === 'Transform') {\n                  setSelectedId(point.id);\n                  const points = pointsInfo.slice();\n                  const lastIndex = points.length - 1;\n                  const lastItem = points[lastIndex];\n                  points[lastIndex] = points[i];\n                  points[i] = lastItem;\n                  setPointsInfo(points);\n                  setLabel(point.label)\n                } else if (mode === 'Del') {\n                  const points = pointsInfo.slice();\n                  setPointsInfo(points.filter((element) => element.id !== point.id));\n                }\n              }}\n              onChange={(newAttrs: any) => {\n                const points = pointsInfo.slice();\n                points[i] = newAttrs;\n                setPointsInfo(points);\n              }}\n            />\n          );\n        })}\n      </Layer></Stage>\n  );\n};\n\n\nexport default PointCanvas;","/home/DigPatho/Streamlit-Image-Annotation/streamlit_image_annotation/Point/frontend/src/Point.tsx",["58","59","60","61","62"],[],"import React, { useState, useEffect } from \"react\"\nimport { Circle, Rect, Text, Transformer } from 'react-konva';\n\nexport interface RectProps {\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  id: string,\n  stroke: string,\n  label: string,\n}\nexport interface BBoxProps {\n  rectProps: RectProps,\n  onChange: any,\n  isSelected: boolean,\n  onClick: any,\n  scale: number,\n  strokeWidth: number\n}\nconst Point = (props: BBoxProps)=>{\n  const {\n    rectProps, onChange, isSelected, onClick, scale, strokeWidth\n  }: BBoxProps = props\n\n  return (\n    <React.Fragment>\n      <Circle\n        onClick={onClick}\n        {...rectProps}\n        x={rectProps.x * scale}\n        y={rectProps.y * scale}\n        width={strokeWidth*2}\n        height={strokeWidth*2}\n        draggable={isSelected}\n        strokeWidth={isSelected?strokeWidth*3:strokeWidth}\n        onDragEnd={(e) => {\n          onChange({\n            ...rectProps,\n            x: e.target.x() / scale,\n            y: e.target.y() / scale,\n          });\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\n\nexport default Point;","/home/DigPatho/InteractiveAnnotatorStreamlitV3/streamlit_image_annotation/Point/frontend/src/index.tsx",[],[],"/home/DigPatho/InteractiveAnnotatorStreamlitV3/streamlit_image_annotation/Point/frontend/src/PointDet.tsx",["63","64"],[],"/home/DigPatho/InteractiveAnnotatorStreamlitV3/streamlit_image_annotation/Point/frontend/src/PointCanvas.tsx",["65"],[],"/home/DigPatho/InteractiveAnnotatorStreamlitV3/streamlit_image_annotation/Point/frontend/src/ThemeSwitcher.tsx",[],[],"/home/DigPatho/InteractiveAnnotatorStreamlitV3/streamlit_image_annotation/Point/frontend/src/Point.tsx",["66","67","68","69","70"],[],{"ruleId":"71","severity":1,"message":"72","line":86,"column":6,"nodeType":"73","endLine":86,"endColumn":18,"suggestions":"74"},{"ruleId":"71","severity":1,"message":"75","line":99,"column":6,"nodeType":"73","endLine":99,"endColumn":18,"suggestions":"76"},{"ruleId":"71","severity":1,"message":"77","line":74,"column":6,"nodeType":"73","endLine":74,"endColumn":30,"suggestions":"78"},{"ruleId":"79","severity":1,"message":"80","line":1,"column":17,"nodeType":"81","messageId":"82","endLine":1,"endColumn":25},{"ruleId":"79","severity":1,"message":"83","line":1,"column":27,"nodeType":"81","messageId":"82","endLine":1,"endColumn":36},{"ruleId":"79","severity":1,"message":"84","line":2,"column":18,"nodeType":"81","messageId":"82","endLine":2,"endColumn":22},{"ruleId":"79","severity":1,"message":"85","line":2,"column":24,"nodeType":"81","messageId":"82","endLine":2,"endColumn":28},{"ruleId":"79","severity":1,"message":"86","line":2,"column":30,"nodeType":"81","messageId":"82","endLine":2,"endColumn":41},{"ruleId":"71","severity":1,"message":"72","line":86,"column":6,"nodeType":"73","endLine":86,"endColumn":18,"suggestions":"87"},{"ruleId":"71","severity":1,"message":"75","line":99,"column":6,"nodeType":"73","endLine":99,"endColumn":18,"suggestions":"88"},{"ruleId":"71","severity":1,"message":"77","line":74,"column":6,"nodeType":"73","endLine":74,"endColumn":30,"suggestions":"89"},{"ruleId":"79","severity":1,"message":"80","line":1,"column":17,"nodeType":"81","messageId":"82","endLine":1,"endColumn":25},{"ruleId":"79","severity":1,"message":"83","line":1,"column":27,"nodeType":"81","messageId":"82","endLine":1,"endColumn":36},{"ruleId":"79","severity":1,"message":"84","line":2,"column":18,"nodeType":"81","messageId":"82","endLine":2,"endColumn":22},{"ruleId":"79","severity":1,"message":"85","line":2,"column":24,"nodeType":"81","messageId":"82","endLine":2,"endColumn":28},{"ruleId":"79","severity":1,"message":"86","line":2,"column":30,"nodeType":"81","messageId":"82","endLine":2,"endColumn":41},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'label_list' and 'use_space'. Either include them or remove the dependency array.","ArrayExpression",["90"],"React Hook useEffect has a missing dependency: 'label_list'. Either include it or remove the dependency array.",["91"],"React Hook useEffect has a missing dependency: 'setPointsInfo'. Either include it or remove the dependency array.",["92"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Rect' is defined but never used.","'Text' is defined but never used.","'Transformer' is defined but never used.",["93"],["94"],["95"],{"desc":"96","fix":"97"},{"desc":"98","fix":"99"},{"desc":"100","fix":"101"},{"desc":"96","fix":"102"},{"desc":"98","fix":"103"},{"desc":"100","fix":"104"},"Update the dependencies array to be: [label_list, pointsInfo, use_space]",{"range":"105","text":"106"},"Update the dependencies array to be: [label_list, pointsInfo]",{"range":"107","text":"108"},"Update the dependencies array to be: [pointsInfo, image_size, setPointsInfo]",{"range":"109","text":"110"},{"range":"111","text":"106"},{"range":"112","text":"108"},{"range":"113","text":"110"},[2535,2547],"[label_list, pointsInfo, use_space]",[2945,2957],"[label_list, pointsInfo]",[1911,1935],"[pointsInfo, image_size, setPointsInfo]",[2533,2545],[2943,2955],[1911,1935]]